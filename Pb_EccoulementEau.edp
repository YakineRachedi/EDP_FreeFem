// Données
real d = 0.1;
real L = 1;
real h = 0.01;
real mu = 0.1;

int nx = L/h;
int ny = d/h;


func uxIn = 1 - ((y - (d/2)) * (y - (d/2))) / ((d*d/4));

border GammaW1 (t = 0, L) {x = t; y = 0; label = 1;};
border GammaOut (t = 0, d) {x = L; y = t; label = 2;};
border GammaIn (t = d, 0) {x = 0; y = t; label = 3;};
border GAmmaW2 (t = L, 0) {x = t; y = d; label = 4;};

real N = 1/h;
mesh Th = buildmesh(GammaW1(N) + GammaOut(N) + GammaIn(N) + GAmmaW2(N));
Th = adaptmesh(Th, iso = 1, hmax = h, nbvx = 50000);

//mesh Th = square(nx,ny,[0 + (L-0)*x,0 + (d-0)*y]);

plot(Th, wait = 1, cmm="mesh Pb stoks, h = 0.01");


// Résolution EF (inconnues ux uy et p)

fespace Vh(Th, [P1, P1, P0]);

Vh [ux, uy, p], [vx, vy, q];

problem StokesMultiD([ux, uy, p], [vx, vy, q]) = int2d(Th) ( mu * (dx(ux) * dx(vx) + dx(uy) * dx(vy) + dy(ux) * dy(vx) + dy(uy) * dy(vy) ) ) 
                                    - int2d(Th) (p * (dx(vx) + dy(vy)) ) 
                                    + int2d(Th) (q * (dx(ux) + dy(uy)) ) 
                                    + on(1, 4, ux = 0) + on(1,3, 4, uy = 0) + on(3, ux = uxIn);

StokesMultiD;

plot([ux, uy], fill = 1, value = 1, wait = 1, cmm = "Vitesse cas P1");
plot(p, fill = 1, value = 1, wait = 1, cmm = "Pression cas P0");

fespace Vh2(Th, [P2, P2, P1]);

Vh2 [ux2, uy2, p2], [vx2, vy2, q2];

problem StokesMultiD2([ux2, uy2, p2], [vx2, vy2, q2]) = int2d(Th) ( mu * (dx(ux2) * dx(vx2) + dx(uy2) * dx(vy2) + dy(ux2) * dy(vx2) + dy(uy2) * dy(vy2) ) ) 
                                    - int2d(Th) (p2 * (dx(vx2) + dy(vy2)) ) 
                                    + int2d(Th) (q2 * (dx(ux2) + dy(uy2)) ) 
                                    + on(1, 4, ux2 = 0, uy2 = 0) + on(3, ux2 = uxIn, uy2 = 0);

StokesMultiD2;

plot([ux2, uy2], fill = 1, value = 1, wait = 1, cmm = "Vitesse cas P2");
plot(p2, fill = 1, value = 1, wait = 1, cmm = "Pression cas P1");


// écriture matricielle :

varf a([ux,uy,p],[vx,vy,q]) = int2d(Th) ( mu * (dx(ux) * dx(vx) + dx(uy) * dx(vy) + dy(ux) * dy(vx) + dy(uy) * dy(vy) ) ) 
                                    - int2d(Th) (p * (dx(vx) + dy(vy)) ) 
                                    + int2d(Th) (q * (dx(ux) + dy(uy)) ) 
                                    + on(1, 4, ux = 0, uy = 0) + on(3, ux = uxIn, uy = 0);

varf b([ux,uy,p],[vx,vy,q]) = on(1, 4, ux = 0, uy = 0) + on(3, ux = uxIn, uy = 0);

matrix A = a(Vh,Vh);
real[int] B = b(0,Vh);
set(A,solver = sparsesolver);

real[int] w = A^-1 * B;
ux[] = w;
plot([ux,uy], fill=1 ,value=1 ,wait=1 , cmm = "Vitesse (cas Matriciel )");
plot(p,fill=1,value=1,wait=1, cmm = "Pression (cas Matriciel)");


// Extension 3D
load "msh3"

border Disque (t=0,2*pi){x = d*cos(t)/2; y = d*sin(t)/2; label = 5;};
real hDisque = 0.01;
real r = d / 2; // rayon
real ND = 2*pi*r / (hDisque) + 1; 

mesh ThDisque = buildmesh(Disque(ND));

plot(ThDisque, wait=1, cmm="disque avec h = " + hDisque); 

//Extrusion du maillage
real z0 = 0, z1 = L;
int Nz = L /hDisque + 1; 
int[int] rup = [0, 6];
 
int[int] rdown = [0, 7];
 
mesh3 ThCylindre = buildlayers(ThDisque, Nz, zbound=[z0,z1], labelup = rup, labeldown = rdown);
plot (ThCylindre, wait=1, cmm="mesh 3D"); 


func uzIn = 1-(sqrt(x*x + y*y)/(d/2));

fespace Vh3(ThCylindre,[P1,P1,P1,P0]);
Vh3[ux3, uy3, uz, p3],[vx3, vy3, vz, q3];
problem Stokes3D([ux3, uy3, uz, p3], [vx3, vy3, vz, q3]) =
    int3d(ThCylindre)(
        mu * (dx(ux3) * dx(vx3) + dy(ux3) * dy(vx3) + dz(ux3) * dz(vx3) +
              dx(uy3) * dx(vy3) + dy(uy3) * dy(vy3) + dz(uy3) * dz(vy3) +
              dx(uz) * dx(vz) + dy(uz) * dy(vz) + dz(uz) * dz(vz)) 
    )
    - int3d(ThCylindre)(
        p3 * (dx(vx3) + dy(vy3) + dz(vz))  
    )
    - int3d(ThCylindre)(
        q3 * (dx(ux3) + dy(uy3) + dz(uz)) 
    )
    + on(1, ux3 = 0, uy3 = 0, uz = 0)  
    + on(7, ux3 = uxIn, uy3 = 0, uz = uzIn);  

Stokes3D;